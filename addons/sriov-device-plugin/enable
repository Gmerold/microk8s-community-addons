#!/usr/bin/env python3

import json
import os
import subprocess
import time
import tempfile

import click

KUBECTL = os.path.expandvars("$SNAP/microk8s-kubectl.wrapper")
SCRIPT_PATH = os.path.abspath(os.path.dirname(__file__))


@click.command()
@click.option(
    "--resource",
    "-r",
    "resources",
    required=True,
    type=(str, str),
    multiple=True,
    help="{\"${RESOURCE_NAME\": \"${PCI_ADDRESS}\"}"
)
def main(resources):
    resources = dict(resources)
    resources_list = {
        "resourceList": [
            {
                "resourceName": resource_name,
                "selectors": {
                    "pciAddresses": [pci_address]
                }
            }
            for resource_name, pci_address in resources.items()
        ]
    }

    sriovdp_config_manifest = f"""apiVersion: v1
kind: ConfigMap
metadata:
  name: sriovdp-config
  namespace: kube-system
data:
  config.json: |
    {json.dumps(resources_list)}
"""

    click.echo("Enabling SRIOV device plugin...")

    with tempfile.NamedTemporaryFile(mode="w+") as sriovdp_config:
        sriovdp_config.write(sriovdp_config_manifest)
        sriovdp_config.flush()

        subprocess.check_call([KUBECTL, "apply", "-f", sriovdp_config.name])
    subprocess.check_call([KUBECTL, "apply", "-f", os.path.join(SCRIPT_PATH, "sriovdp.yaml")])

    now = time.time()
    timeout = 300
    while time.time() - now <= timeout:
        allocatable_resources = subprocess.check_output(
            [KUBECTL, "get", "node", "-o", "json"]
        ).decode("utf-8")
        if not all(resource in allocatable_resources for resource, _ in resources.items()):
            click.echo("Waiting for SRIOV device plugin to be ready...")
            time.sleep(5)
        else:
            click.echo("SRIOV device plugin is now enabled.")
            return

    raise TimeoutError("Unable to start SRIOV plugin. Operation timed out!")


if __name__ == "__main__":
    main()
